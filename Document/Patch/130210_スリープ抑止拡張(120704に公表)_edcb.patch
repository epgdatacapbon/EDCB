*** EpgTimer/EpgTimer/Setting/SetAppCancelWindow.xaml	Sun Oct 30 23:49:34 2011
--- EpgTimer/EpgTimer/Setting/SetAppCancelWindow.xaml	Tue Jul 03 04:29:39 2012
***************
*** 1,7 ****
  ?<Window x:Class="EpgTimer.SetAppCancelWindow"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
!         Title="抑制条件" Height="394" Width="450" Closing="Window_Closing" Loaded="Window_Loaded" ShowInTaskbar="False" WindowStartupLocation="CenterOwner" ResizeMode="NoResize">
  <!--
      <Window.Resources>
          <ResourceDictionary Source="/PresentationFramework.Aero, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35;component/themes/aero.normalcolor.xaml" />
--- 1,7 ----
  ?<Window x:Class="EpgTimer.SetAppCancelWindow"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
!         Title="抑制条件" Height="460" Width="450" Closing="Window_Closing" Loaded="Window_Loaded" ShowInTaskbar="False" WindowStartupLocation="CenterOwner" ResizeMode="NoResize">
  <!--
      <Window.Resources>
          <ResourceDictionary Source="/PresentationFramework.Aero, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35;component/themes/aero.normalcolor.xaml" />
***************
*** 29,36 ****
              </TextBox.Resources>
          </TextBox>            
          <Label Content="分以内に開始される場合" Height="28" HorizontalAlignment="Left" Margin="154,215,0,0" Name="label4" VerticalAlignment="Top" />
!         <CheckBox Content="追っかけ再生、ストリーミング再生を行っている場合" Height="16" HorizontalAlignment="Left" Margin="12,249,0,0" Name="checkBox_ng_fileStreaming" VerticalAlignment="Top" />
!         <CheckBox Content="共有フォルダのTSファイルにアクセスがある場合" Height="16" HorizontalAlignment="Left" Margin="12,271,0,0" Name="checkBox_ng_shareFile" VerticalAlignment="Top" />
!         <Label Content="（※EpgTimerSrv.exeが管理者権限で実行されている必要があります）" Height="28" HorizontalAlignment="Left" Margin="12,293,0,0" Name="label5" VerticalAlignment="Top" Foreground="Red" />
      </Grid>
  </Window>
--- 29,45 ----
              </TextBox.Resources>
          </TextBox>            
          <Label Content="分以内に開始される場合" Height="28" HorizontalAlignment="Left" Margin="154,215,0,0" Name="label4" VerticalAlignment="Top" />
!         <CheckBox Content="追っかけ再生、ストリーミング再生を行っている場合" Height="16" HorizontalAlignment="Left" Margin="12,322,0,0" Name="checkBox_ng_fileStreaming" VerticalAlignment="Top" />
!         <CheckBox Content="共有フォルダのTSファイルにアクセスがある場合" Height="16" HorizontalAlignment="Left" Margin="12,344,0,0" Name="checkBox_ng_shareFile" VerticalAlignment="Top" />
!         <Label Content="（※EpgTimerSrv.exeが管理者権限で実行されている必要があります）" Height="28" HorizontalAlignment="Left" Margin="12,366,0,0" Name="label5" VerticalAlignment="Top" Foreground="Red" />
!         <TextBox Height="24" HorizontalAlignment="Left" Margin="31,290,0,0" Name="textBox_ng_usePC_min" VerticalAlignment="Top" Width="51">
!             <TextBox.Resources>
!                 <Style TargetType="{x:Type TextBox}">
!                     <Setter Property="InputMethod.PreferredImeState" Value="Off" />
!                 </Style>
!             </TextBox.Resources>
!         </TextBox>
!         <Label Content="分以内にユーザー操作があれば使用中とみなす" Height="28" HorizontalAlignment="Left" Margin="87,288,0,0" Name="label7" VerticalAlignment="Top" />
!         <CheckBox Content="PCを使用中の場合" Height="16" HorizontalAlignment="Left" Margin="12,268,0,0" Name="checkBox_ng_usePC" VerticalAlignment="Top" />
      </Grid>
  </Window>
*** EpgTimer/EpgTimer/Setting/SetAppCancelWindow.xaml.cs	Sun Oct 30 23:49:34 2011
--- EpgTimer/EpgTimer/Setting/SetAppCancelWindow.xaml.cs	Tue Jul 03 04:46:19 2012
***************
*** 20,25 ****
--- 20,27 ----
      {
          public List<String> processList = new List<string>();
          public String ngMin = "30";
+         public bool ngUsePC = false;
+         public String ngUsePCMin = "3";
          public bool ngFileStreaming = false;
          public bool ngShareFile = false;
  
***************
*** 76,81 ****
--- 78,92 ----
                  processList.Add(info);
              }
              ngMin = textBox_ng_min.Text;
+             if (checkBox_ng_usePC.IsChecked == true)
+             {
+                 ngUsePC = true;
+             }
+             else
+             {
+                 ngUsePC = false;
+             }
+             ngUsePCMin = textBox_ng_usePC_min.Text;
              if (checkBox_ng_fileStreaming.IsChecked == true)
              {
                  ngFileStreaming = true;
***************
*** 102,107 ****
--- 113,120 ----
              }
  
              textBox_ng_min.Text = ngMin;
+             checkBox_ng_usePC.IsChecked = ngUsePC;
+             textBox_ng_usePC_min.Text = ngUsePCMin;
              checkBox_ng_fileStreaming.IsChecked = ngFileStreaming;
              checkBox_ng_shareFile.IsChecked = ngShareFile;
  
*** EpgTimer/EpgTimer/Setting/SetAppView.xaml.cs	Mon Oct 10 22:42:34 2011
--- EpgTimer/EpgTimer/Setting/SetAppView.xaml.cs	Tue Jul 03 04:44:07 2012
***************
*** 25,30 ****
--- 25,32 ----
      {
          private List<String> ngProcessList = new List<String>();
          private String ngMin = "10";
+         public bool ngUsePC = false;
+         public String ngUsePCMin = "3";
          public bool ngFileStreaming = false;
          public bool ngShareFile = false;
  
***************
*** 150,155 ****
--- 152,164 ----
                  buff.Clear();
                  IniFileHandler.GetPrivateProfileString("NO_SUSPEND", "NoStandbyTime", "10", buff, 512, SettingPath.TimerSrvIniPath);
                  ngMin = buff.ToString();
+                 if (IniFileHandler.GetPrivateProfileInt("NO_SUSPEND", "NoUsePC", 0, SettingPath.TimerSrvIniPath) == 1)
+                 {
+                     ngUsePC = true;
+                 }
+                 buff.Clear();
+                 IniFileHandler.GetPrivateProfileString("NO_SUSPEND", "NoUsePCTime", "3", buff, 512, SettingPath.TimerSrvIniPath);
+                 ngUsePCMin = buff.ToString();
                  if (IniFileHandler.GetPrivateProfileInt("NO_SUSPEND", "NoFileStreaming", 0, SettingPath.TimerSrvIniPath) == 1)
                  {
                      ngFileStreaming = true;
***************
*** 512,517 ****
--- 521,535 ----
              }
  
              IniFileHandler.WritePrivateProfileString("NO_SUSPEND", "NoStandbyTime", ngMin, SettingPath.TimerSrvIniPath);
+             if (ngUsePC == true)
+             {
+                 IniFileHandler.WritePrivateProfileString("NO_SUSPEND", "NoUsePC", "1", SettingPath.TimerSrvIniPath);
+             }
+             else
+             {
+                 IniFileHandler.WritePrivateProfileString("NO_SUSPEND", "NoUsePC", "0", SettingPath.TimerSrvIniPath);
+             }
+             IniFileHandler.WritePrivateProfileString("NO_SUSPEND", "NoUsePCTime", ngUsePCMin, SettingPath.TimerSrvIniPath);
              if (ngFileStreaming == true)
              {
                  IniFileHandler.WritePrivateProfileString("NO_SUSPEND", "NoFileStreaming", "1", SettingPath.TimerSrvIniPath);
***************
*** 819,824 ****
--- 837,844 ----
              SetAppCancelWindow dlg = new SetAppCancelWindow();
              dlg.processList = this.ngProcessList;
              dlg.ngMin = this.ngMin;
+             dlg.ngUsePC = this.ngUsePC;
+             dlg.ngUsePCMin = this.ngUsePCMin;
              dlg.ngFileStreaming = this.ngFileStreaming;
              dlg.ngShareFile = this.ngShareFile;
              dlg.Owner = (Window)PresentationSource.FromVisual(this).RootVisual;
***************
*** 826,831 ****
--- 846,853 ----
  
              this.ngProcessList = dlg.processList;
              this.ngMin = dlg.ngMin;
+             this.ngUsePC = dlg.ngUsePC;
+             this.ngUsePCMin = dlg.ngUsePCMin;
              this.ngFileStreaming = dlg.ngFileStreaming;
              this.ngShareFile = dlg.ngShareFile;
          }
*** EpgTimerSrv/EpgTimerSrv/EpgTimerSrvMain.cpp	Sun Apr 01 22:14:30 2012
--- EpgTimerSrv/EpgTimerSrv/EpgTimerSrvMain.cpp	Tue Jul 03 11:49:42 2012
***************
*** 190,196 ****
  					}
  				}
  
! 				if( this->reserveManager.IsSuspendOK() == TRUE && streamingChk == TRUE){
  					if( this->suspendMode != 0xFF && this->rebootFlag != 0xFF ){
  						//問い合わせ
  						if( this->suspendMode != 0 && this->suspendMode != 4 ){
--- 190,203 ----
  					}
  				}
  
! 				BOOL userWorkingChk = TRUE;
! 				if (this->ngUsePC == TRUE) {
! 					if (IsUserWorking() == TRUE) {
! 						userWorkingChk = FALSE;
! 					}
! 				}
! 
! 				if( this->reserveManager.IsSuspendOK() == TRUE && userWorkingChk == TRUE && streamingChk == TRUE){
  					if( this->suspendMode != 0xFF && this->rebootFlag != 0xFF ){
  						//問い合わせ
  						if( this->suspendMode != 0 && this->suspendMode != 4 ){
***************
*** 291,296 ****
--- 298,305 ----
  	this->autoAddHour = GetPrivateProfileInt(L"SET", L"AutoAddHour", 0, iniPath.c_str());
  	this->chkGroupEvent = GetPrivateProfileInt(L"SET", L"ChkGroupEvent", 1, iniPath.c_str());
  	this->rebootDef = (BYTE)GetPrivateProfileInt(L"SET", L"Reboot", 0, iniPath.c_str());
+ 	this->ngUsePC = GetPrivateProfileInt(L"NO_SUSPEND", L"NoUsePC", 0, iniPath.c_str());
+ 	this->ngUsePCTime = GetPrivateProfileInt(L"NO_SUSPEND", L"NoUsePCTime", 3, iniPath.c_str());
  	this->ngFileStreaming = (BYTE)GetPrivateProfileInt(L"NO_SUSPEND", L"NoFileStreaming", 0, iniPath.c_str());
  	if( GetPrivateProfileInt(L"SET", L"UseSrvCoop", 0, iniPath.c_str()) == 1 ){
  		this->ngEpgFileSrvCoop = GetPrivateProfileInt(L"SET", L"NgEpgFileSrvCoop", 0, iniPath.c_str());
***************
*** 636,641 ****
--- 645,672 ----
  	return ret;
  }
  
+ BOOL CEpgTimerSrvMain::IsUserWorking()
+ {
+ 	if (this->ngUsePCTime == 0) {
+ 		return TRUE;	// 閾値が0のときは常に使用中扱い
+ 	}
+ 
+ 	// 最終入力時刻取得
+ 	LASTINPUTINFO lii;
+ 	lii.cbSize = sizeof(LASTINPUTINFO);
+ 	GetLastInputInfo(&lii);
+ 
+ 	// 現在時刻取得
+ 	ULONGLONG dwNow = GetTickCount();
+ 
+ 	// GetTickCount()は49.7日周期でリセットされるので桁上りさせる
+ 	if (lii.dwTime > dwNow) {
+ 		dwNow += 0x100000000;
+ 	}
+ 
+ 	DWORD threshold = this->ngUsePCTime * 60 * 1000;
+ 	return (dwNow - lii.dwTime < threshold);
+ }
  
  BOOL CEpgTimerSrvMain::AutoAddReserveEPG()
  {
*** EpgTimerSrv/EpgTimerSrv/EpgTimerSrvMain.h	Fri Mar 30 17:02:50 2012
--- EpgTimerSrv/EpgTimerSrv/EpgTimerSrvMain.h	Tue Jul 03 11:24:46 2012
***************
*** 39,44 ****
--- 39,49 ----
  	// TRUE（構わない）、FALSE（移行しては駄目）
  	BOOL ChkSuspend();
  
+ 	//ユーザーがPCを使用中かどうか
+ 	//戻り値：
+ 	// TRUE（使用中）、FALSE（使用していない）
+ 	BOOL IsUserWorking();
+ 
  protected:
  	HANDLE lockEvent;
  
***************
*** 78,83 ****
--- 83,90 ----
  	int autoAddHour;
  	BOOL chkGroupEvent;
  	BYTE rebootDef;
+ 	BOOL ngUsePC;
+ 	DWORD ngUsePCTime;
  	BOOL ngFileStreaming;
  	BOOL ngEpgFileSrvCoop;
  	BOOL enableHttpSrv;
